<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>algorithm on log</title>
    <link>http://example.org/tags/algorithm/</link>
    <description>Recent content in algorithm on log</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 04 Mar 2015 13:00:00 +0800</lastBuildDate><atom:link href="http://example.org/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simplify Path</title>
      <link>http://example.org/posts/simplify-path/</link>
      <pubDate>Wed, 04 Mar 2015 13:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/simplify-path/</guid>
      <description>Given an absolute path for a file (Unix-style), simplify it.
For example, path = &amp;ldquo;/home/&amp;rdquo;, =&amp;gt; &amp;ldquo;/home&amp;rdquo; path = &amp;ldquo;/a/./b/../../c/&amp;rdquo;, =&amp;gt; &amp;ldquo;/c&amp;rdquo;
Corner Cases: Did you consider the case where path = &amp;ldquo;/../&amp;rdquo;? In this case, you should return &amp;ldquo;/&amp;rdquo;. Another corner case is the path might contain multiple slashes &amp;lsquo;/&amp;rsquo; together, such as &amp;ldquo;/home//foo/&amp;rdquo;. In this case, you should ignore redundant slashes and return &amp;ldquo;/home/foo&amp;rdquo;.
https://oj.leetcode.com/problems/simplify-path/
  #include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;iterator&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;sstream&amp;gt;#include &amp;lt;stack&amp;gt;using namespace std;  class Solution { public: 	string simplifyPath(string path) 	{ 	vector&amp;lt;string&amp;gt; vs=split(path,&amp;#34;/&amp;#34;); 	vector&amp;lt;string&amp;gt; s; 	for(auto str:vs) 	{ 	if(str==&amp;#34;.</description>
    </item>
    
    <item>
      <title>Pow(x,n)</title>
      <link>http://example.org/posts/powxn/</link>
      <pubDate>Wed, 04 Mar 2015 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/powxn/</guid>
      <description>Implement pow(x, n).
https://oj.leetcode.com/problems/powx-n/
  class Solution { public:  double pow(double x, int n) {  if(n==0)  {  return 1.0;  }  if(n&amp;lt;0)  {  if(n==numeric_limits&amp;lt;int&amp;gt;::min())  {  return 1.0/(pow(x,numeric_limits&amp;lt;int&amp;gt;::max())*x);  }  else  {  return 1.0/pow(x,-n);  }  }  double result=1.0;  for(;n&amp;gt;0;x*=x,n&amp;gt;&amp;gt;=1)  {  if(n&amp;amp;1)  {  result*=x;  }  }  return result;  } }; </description>
    </item>
    
    <item>
      <title>Roman to Integer</title>
      <link>http://example.org/posts/roman-to-integer/</link>
      <pubDate>Tue, 03 Mar 2015 13:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/roman-to-integer/</guid>
      <description>Given a roman numeral, convert it to an integer.
Input is guaranteed to be within the range from 1 to 3999.
https://oj.leetcode.com/problems/roman-to-integer/
  #include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;map&amp;gt;using namespace std;  class Solution { public: 	Solution() 	{ 	mci[&amp;#39;I&amp;#39;]=1; 	mci[&amp;#39;V&amp;#39;]=5; 	mci[&amp;#39;X&amp;#39;]=10; 	mci[&amp;#39;L&amp;#39;]=50; 	mci[&amp;#39;C&amp;#39;]=100; 	mci[&amp;#39;D&amp;#39;]=500; 	mci[&amp;#39;M&amp;#39;]=1000; 	}  int romanToInt(string s) 	{ 	int num=0; 	for(size_t i=0;i&amp;lt;s.length();i++) 	{ 	if(i&amp;gt;0) 	{ 	if(mci[s[i-1]]&amp;lt;mci[s[i]]) 	{ 	num=num+mci[s[i]]-2*mci[s[i-1]]; 	} 	else 	{ 	num+=mci[s[i]]; 	} 	} 	else 	{ 	num+=mci[s[i]]; 	} 	} 	return num; 	} private: 	map&amp;lt;char,int&amp;gt; mci; };  int main(int argc,char*argv[]) { 	Solution s; 	cout&amp;lt;&amp;lt;s.</description>
    </item>
    
    <item>
      <title>Count and Say</title>
      <link>http://example.org/posts/count-and-say/</link>
      <pubDate>Tue, 03 Mar 2015 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/count-and-say/</guid>
      <description>The count-and-say sequence is the sequence of integers beginning as follows: 1, 11, 21, 1211, 111221, &amp;hellip;
1 is read off as &amp;ldquo;one 1&amp;rdquo; or 11.
11 is read off as &amp;ldquo;two 1s&amp;rdquo; or 21.
21 is read off as &amp;ldquo;one 2, then one 1&amp;rdquo; or 1211.
Given an integer n, generate the nth sequence.
Note: The sequence of integers will be represented as a string. Given a roman numeral, convert it to an integer.</description>
    </item>
    
    <item>
      <title>多线程下的单例模式</title>
      <link>http://example.org/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 21 Feb 2015 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>多线程下的单例模式。
 一个简单的单例:
 class Singleton { public: 	static Singleton* getInstance() 	{ 	if(instance==nullptr) 	{ 	instance=new Singleton(); 	} 	return instance; 	} private: 	Singleton(){}; 	Singleton(const Singleton&amp;amp;); 	const Singleton&amp;amp; operator=(const Singleton&amp;amp;); 	static Singleton *instance; }; Singleton* Singleton::instance=nullptr; 但是这种单例在多线程环境下就会出现问题。 例如运行下面这段程序：
 #include &amp;lt;iostream&amp;gt;#include &amp;lt;mutex&amp;gt;#include &amp;lt;thread&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;algorithm&amp;gt;using namespace std;  class Singleton { public: 	static Singleton* getInstance() 	{ 	if(instance==nullptr) 	{ 	instance=new Singleton(); 	} 	return instance; 	} 	int getNum() 	{ 	return num; 	} private: 	Singleton():num{rand()} 	{ 	} 	Singleton(const Singleton&amp;amp;); 	const Singleton&amp;amp; operator=(const Singleton&amp;amp;); 	int num; 	static Singleton *instance; }; Singleton* Singleton::instance=nullptr;  mutex mtx; void fun() { 	int n=Singleton::getInstance()-&amp;gt;getNum(); 	mtx.</description>
    </item>
    
    <item>
      <title>不使用乘除法或if while for 求1...n的和</title>
      <link>http://example.org/posts/%E4%B8%8D%E4%BD%BF%E7%94%A8%E4%B9%98%E9%99%A4%E6%B3%95%E6%88%96if-while-for-%E6%B1%821...n%E7%9A%84%E5%92%8C/</link>
      <pubDate>Mon, 09 Feb 2015 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/%E4%B8%8D%E4%BD%BF%E7%94%A8%E4%B9%98%E9%99%A4%E6%B3%95%E6%88%96if-while-for-%E6%B1%821...n%E7%9A%84%E5%92%8C/</guid>
      <description>在知乎上的一道题，记录下来。
 #include &amp;lt;iostream&amp;gt;using namespace std;  int sum(int n) { 	static decltype(&amp;amp;sum) fun[]={[](int){return 0;},sum}; 	return n+fun[n&amp;gt;0](n-1); }  class Sum { public: 	Sum() 	{ 	cur++; 	sum+=cur; 	} 	static int sum; 	static int cur; }; int Sum::sum=0; int Sum::cur=0;  int main(int argc,char *argv[]) { 	cout&amp;lt;&amp;lt;sum(10)&amp;lt;&amp;lt;endl; 	Sum s[10]; 	cout&amp;lt;&amp;lt;Sum::sum&amp;lt;&amp;lt;endl; 	return 0; } </description>
    </item>
    
    <item>
      <title>Length of Last Word</title>
      <link>http://example.org/posts/length-of-last-word/</link>
      <pubDate>Mon, 15 Dec 2014 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/length-of-last-word/</guid>
      <description>Given a string s consists of upper/lower-case alphabets and empty space characters &amp;rsquo; &amp;lsquo;, return the length of last word in the string.
If the last word does not exist, return 0.
Note: A word is defined as a character sequence consists of non-space characters only.
For example, Given s = &amp;ldquo;Hello World&amp;rdquo;, return 5.
https://oj.leetcode.com/problems/length-of-last-word/
 ####注意把尾部的空格忽略掉
class Solution { public:  int lengthOfLastWord(const char *s) {  int len=0;  int start=strlen(s)-1;  while(s[start]==&amp;#39; &amp;#39;)  {  start--;  }  for(int i=start;i&amp;gt;=0&amp;amp;&amp;amp;s[i]!</description>
    </item>
    
    <item>
      <title>Remove Duplicates from Sorted Array</title>
      <link>http://example.org/posts/remove-duplicates-from-sorted-array/</link>
      <pubDate>Mon, 15 Dec 2014 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/remove-duplicates-from-sorted-array/</guid>
      <description>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this in place with constant memory.
For example, Given input array A = [1,1,2],
Your function should return length = 2, and A is now [1,2].
https://oj.leetcode.com/problems/remove-duplicates-from-sorted-array/
 ####注意判断 n 为 0
class Solution { public:  int removeDuplicates(int A[], int n) {  if(n==0)  {  return n;  }  int index=0;  for(int i=1;i&amp;lt;n;i++)  {  if(A[i]!</description>
    </item>
    
    <item>
      <title>Maximum Depth of Binary Tree</title>
      <link>http://example.org/posts/maximum-depth-of-binary-tree/</link>
      <pubDate>Fri, 12 Dec 2014 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/maximum-depth-of-binary-tree/</guid>
      <description>Given a binary tree, find its maximum depth.
The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
https://oj.leetcode.com/problems/maximum-depth-of-binary-tree/
 class Solution { public:  int maxDepth(TreeNode *root) {  if(!root)  {  return 0;  }  int left=maxDepth(root-&amp;gt;left);  int right=maxDepth(root-&amp;gt;right);  return left&amp;lt;right?(right+1):(left+1);  } }; </description>
    </item>
    
    <item>
      <title>Path Sum II</title>
      <link>http://example.org/posts/path-sum-ii/</link>
      <pubDate>Thu, 11 Dec 2014 14:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/path-sum-ii/</guid>
      <description>Given a binary tree and a sum, find all root-to-leaf paths where each path&amp;rsquo;s sum equals the given sum.
For example: Given the below binary tree and sum = 22,
return
https://oj.leetcode.com/problems/path-sum-ii/
 ####将所有路径种和为 sum 的路径添加到 result 中。
class Solution { public:  vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; pathSum(TreeNode *root, int sum)  {  vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; vvi;  vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result;  vector&amp;lt;int&amp;gt; v;  getPaths(root,v,vvi);  for(auto path:vvi)  {  if(accumulate(path.begin(),path.end(),0)==sum)  {  result.</description>
    </item>
    
    <item>
      <title>Maximum Subarray</title>
      <link>http://example.org/posts/maximum-subarray/</link>
      <pubDate>Thu, 11 Dec 2014 13:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/maximum-subarray/</guid>
      <description>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
For example, given the array [−2,1,−3,4,−1,2,1,−5,4], the contiguous subarray [4,−1,2,1] has the largest sum = 6.
More practice: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
https://oj.leetcode.com/problems/maximum-subarray/
 ####最简单的当然是枚举所有子数组，复杂度为 O(n^2),用贪心算法可以实现复杂度为 O(n)。
class Solution { public:  int maxSubArray(int A[], int n) {  int max=A[0];  int curMax=A[0];  for(int i=1;i&amp;lt;n;i++)  {  if(curMax&amp;lt;0)  {  curMax=0;  }  curMax+=A[i];  if(curMax&amp;gt;max)  {  max=curMax;  }  }  return max;  } }; </description>
    </item>
    
    <item>
      <title>Binary Tree Preorder Traversal</title>
      <link>http://example.org/posts/binary-tree-preorder-traversal/</link>
      <pubDate>Thu, 11 Dec 2014 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/binary-tree-preorder-traversal/</guid>
      <description>Given a binary tree, return the preorder traversal of its nodes&amp;rsquo; values.
For example: Given binary tree {1,#,2,3},
return [1,2,3].
Note: Recursive solution is trivial, could you do it iteratively?
https://oj.leetcode.com/problems/binary-tree-preorder-traversal/
 ####先来个递归
class Solution { public:  vector&amp;lt;int&amp;gt; preorderTraversal(TreeNode *root) {  vector&amp;lt;int&amp;gt; vi;  preorderTraversal(root,vi);  return vi;  }  void preorderTraversal(TreeNode *root,vector&amp;lt;int&amp;gt; &amp;amp;v)  {  if(!root)  {  return;  }  v.push_back(root-&amp;gt;val);  preorderTraversal(root-&amp;gt;left,v);  preorderTraversal(root-&amp;gt;right,v);  } }; ####再来个非递归</description>
    </item>
    
    <item>
      <title>Valid Sudoku</title>
      <link>http://example.org/posts/valid-sudoku/</link>
      <pubDate>Tue, 09 Dec 2014 13:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/valid-sudoku/</guid>
      <description>Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.
The Sudoku board could be partially filled, where empty cells are filled with the character&#39;.&#39;.
![sudoku]({{ site.baseurl }}/images/Valid Sudoku/sudoku.png)
A partially filled sudoku which is valid.
Note: A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.
https://oj.leetcode.com/problems/valid-sudoku/
 ####就是判断每一行，每一列，每一个九宫格里有没有相同的数，有的话则返回 false,否则返回 true。虽然有点丑陋。。。不过还是 ac 了。
class Solution { public:  bool isValid(vector&amp;lt;char&amp;gt; &amp;amp;v)  { 	sort(v.</description>
    </item>
    
    <item>
      <title>Minimum Depth of Binary Tree</title>
      <link>http://example.org/posts/minimum-depth-of-binary-tree/</link>
      <pubDate>Tue, 09 Dec 2014 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/minimum-depth-of-binary-tree/</guid>
      <description>Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
https://oj.leetcode.com/problems/minimum-depth-of-binary-tree/
 ####注意当左右子树有一个位空时，此时根不是叶子节点，所以不能简单返回左右子树中较小的那个。
int minDepth(TreeNode *root) { 	if(root==nullptr) 	{ 	return 0; 	} 	if(root-&amp;gt;left==nullptr&amp;amp;&amp;amp;root-&amp;gt;right==nullptr) 	{ 	return 1; 	} 	int u,v; 	u=v=numeric_limits&amp;lt;int&amp;gt;::max(); 	if(root-&amp;gt;left) 	{ 	u=minDepth(root-&amp;gt;left); 	} 	if(root-&amp;gt;right) 	{ 	v=minDepth(root-&amp;gt;right); 	} 	return 1+(u&amp;lt;v?</description>
    </item>
    
    <item>
      <title>Same Tree</title>
      <link>http://example.org/posts/same-tree/</link>
      <pubDate>Mon, 08 Dec 2014 14:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/same-tree/</guid>
      <description>Given two binary trees, write a function to check if they are equal or not.
Two binary trees are considered equal if they are structurally identical and the nodes have the same value.
https://oj.leetcode.com/problems/same-tree/
 这个比较简单，遍历就行了。
bool isSameTree(TreeNode *p,TreeNode *q) { 	if(p==q) 	{ 	return true; 	} 	if(p==nullptr&amp;amp;&amp;amp;q!=p||q==nullptr&amp;amp;&amp;amp;q!=p) 	{ 	return false; 	} 	return p-&amp;gt;val==q-&amp;gt;val&amp;amp;&amp;amp; 	isSameTree(p-&amp;gt;left,q-&amp;gt;left)&amp;amp;&amp;amp;isSameTree(p-&amp;gt;right,q-&amp;gt;right); } </description>
    </item>
    
    <item>
      <title>Reverse Integer</title>
      <link>http://example.org/posts/reverse-integer/</link>
      <pubDate>Mon, 08 Dec 2014 13:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/reverse-integer/</guid>
      <description>Reverse digits of an integer.
Example1: x = 123, return 321 Example2: x = -123, return -321
https://oj.leetcode.com/problems/reverse-integer/
 这里要注意判断翻转后的值会不会超过 int 范围。
hints: 1234%10==4 -1234%10==-4
int reverse(int x) { 	int max=numeric_limits&amp;lt;int&amp;gt;::max(); 	int min=numeric_limits&amp;lt;int&amp;gt;::min();  	int result=0; 	while(x!=0) 	{ 	if(result&amp;lt;min/10||result&amp;gt;max/10) 	{ 	return 0; 	} 	result=result*10+x%10; 	x/=10; 	} 	return result; } </description>
    </item>
    
    <item>
      <title>Palindrome Number</title>
      <link>http://example.org/posts/palindrome-number/</link>
      <pubDate>Mon, 08 Dec 2014 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/palindrome-number/</guid>
      <description>Determine whether an integer is a palindrome. Do this without extra space.
Some hints: Could negative integers be palindromes? (ie, -1)
If you are thinking of converting the integer to string, note the restriction of using extra space.
You could also try reversing an integer. However, if you have solved the problem &amp;ldquo;Reverse Integer&amp;rdquo;, you know that the reversed integer might overflow. How would you handle such case?
There is a more generic way of solving this problem.</description>
    </item>
    
    <item>
      <title>Path Sum</title>
      <link>http://example.org/posts/path-sum/</link>
      <pubDate>Fri, 05 Dec 2014 13:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/path-sum/</guid>
      <description>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.
For example: Given the below binary tree and sum = 22,
return true, as there exist a root-to-leaf path 5-&amp;gt;4-&amp;gt;11-&amp;gt;2 which sum is 22.
https://oj.leetcode.com/problems/path-sum/
 bool hasPathSum(TreeNode *root,int sum) { 	if(root==nullptr) 	{ 	return false; 	} 	if(root-&amp;gt;left==nullptr&amp;amp;&amp;amp;root-&amp;gt;right==nullptr) 	{ 	return sum==root-&amp;gt;val; 	} 	if(root-&amp;gt;left) 	{ 	root-&amp;gt;left-&amp;gt;val+=root-&amp;gt;val; 	if(hasPathSum(root-&amp;gt;left,sum)) 	{ 	return true; 	} 	} 	if(root-&amp;gt;right) 	{ 	root-&amp;gt;right-&amp;gt;val+=root-&amp;gt;val; 	if(hasPathSum(root-&amp;gt;right,sum)) 	{ 	return true; 	} 	} 	return false; } ####不过上面的程序会修改节点的值，只要修改 sum 就能避免。</description>
    </item>
    
    <item>
      <title>判断序列是不是二叉搜索树的后续遍历</title>
      <link>http://example.org/posts/%E5%88%A4%E6%96%AD%E5%BA%8F%E5%88%97%E6%98%AF%E4%B8%8D%E6%98%AF%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86/</link>
      <pubDate>Fri, 05 Dec 2014 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/%E5%88%A4%E6%96%AD%E5%BA%8F%E5%88%97%E6%98%AF%E4%B8%8D%E6%98%AF%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86/</guid>
      <description>这一题是暑假面试百度实习的时候没做出来的一道题。
 ####二叉搜索树后序遍历的规律是左子树的后续遍历序列都比根小，右子树后序遍历序列都比根大，形如[左子树 右子树 根]。判断方法就是从左遍历序列，找出第一个比根大的元素，然后从这个元素到根（不包括根）的元素都必须比根大。然后递归的判断左右子序列，当子序列只有一个或没有节点的时候返回真。
bool judge(vector&amp;lt;int&amp;gt;::iterator first,vector&amp;lt;int&amp;gt;::iterator last) { 	if(first==last||distance(first,last)==1) 	{ 	return true; 	} 	auto root=last-1; 	vector&amp;lt;int&amp;gt;::iterator pos=first; 	for(auto iter=first;iter!=root;iter++) 	{ 	if(*iter&amp;gt;*root) 	{ 	pos=iter; 	break; 	} 	} 	for(auto iter=pos;iter!=root;iter++) 	{ 	if(*iter&amp;lt;*root) 	{ 	return false; 	} 	} 	return judge(first,pos)&amp;amp;&amp;amp;judge(pos,root); } bool isBinarySearchTreePostOrder(vector&amp;lt;int&amp;gt; vec) { 	judge(vec.begin(),vec.end()); } </description>
    </item>
    
    <item>
      <title>Search in Rotated Sorted Array</title>
      <link>http://example.org/posts/search-in-rotated-sorted-array/</link>
      <pubDate>Thu, 04 Dec 2014 14:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/search-in-rotated-sorted-array/</guid>
      <description>Suppose a sorted array is rotated at some pivot unknown to you beforehand.
(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
https://oj.leetcode.com/problems/search-in-rotated-sorted-array/
 ####看到题目的时候顺手写了个 O(n)的顺序查找，居然也能通过
int search(int A[], int n, int target) { 	for(int i=0;i&amp;lt;n;i++) 	{ 	if(target==A[i]) 	{ 	return i; 	} 	} 	return -1; } ####其实还是可以用 O(logn)的二分查找的</description>
    </item>
    
    <item>
      <title>Construct Binary Tree from Preorder and Inorder Traversal</title>
      <link>http://example.org/posts/construct-binary-tree-from-preorder-and-inorder-traversal-/</link>
      <pubDate>Thu, 04 Dec 2014 13:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/construct-binary-tree-from-preorder-and-inorder-traversal-/</guid>
      <description>Given preorder and inorder traversal of a tree, construct the binary tree.
Note: You may assume that duplicates do not exist in the tree
https://oj.leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
 ####我提交下面代码后，提示 Memory Limit Exceeded
TreeNode *buildTree(vector&amp;lt;int&amp;gt; &amp;amp;preorder, vector&amp;lt;int&amp;gt; &amp;amp;inorder) { 	if (preorder.size() == 0) 	{ 	return nullptr; 	}  	auto root = new TreeNode(preorder[0]); 	auto itrPos = find(inorder.begin(), inorder.end(), preorder[0]); 	vector&amp;lt;int&amp;gt; vlin(inorder.begin(),itrPos),vrin(itrPos+1,inorder.end()); 	vector&amp;lt;int&amp;gt; vlpre(preorder.begin() + 1, preorder.</description>
    </item>
    
    <item>
      <title>Best Time to Buy and Sell Stock</title>
      <link>http://example.org/posts/best-time-to-buy-and-sell-stock-/</link>
      <pubDate>Thu, 04 Dec 2014 12:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/best-time-to-buy-and-sell-stock-/</guid>
      <description>Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.
https://oj.leetcode.com/problems/best-time-to-buy-and-sell-stock/
 ####这一题容易出错的地方是这样求解，求出最大和最小值，然后相减，但是这一题最小值必须在最大值前面，因为不可能在最贵的时候买入，在最便宜的是活卖出。
int maxProfit(vector&amp;lt;int&amp;gt; &amp;amp;prices) { 	if (prices.size() == 0) 	{ 	return 0; 	} 	int max, min; 	max = min = prices[0]; 	for (auto m : prices) 	{ 	if (m&amp;gt;max) 	{ 	max = m; 	} 	if (min&amp;lt;m) 	{ 	min = m; 	} 	} 	return max - min; } ####知道这一点后很容易用 O^2 求解</description>
    </item>
    
    <item>
      <title>Search a 2D Matrix</title>
      <link>http://example.org/posts/search-a-2d-matrix/</link>
      <pubDate>Fri, 21 Nov 2014 14:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/search-a-2d-matrix/</guid>
      <description>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
 Integers in each row are sorted from left to right. The first integer of each row is greater than the last integer of the previous row.  For example, Consider the following matrix:
[ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] https://oj.leetcode.com/problems/search-a-2d-matrix/</description>
    </item>
    
    <item>
      <title>Two Sum</title>
      <link>http://example.org/posts/two-sum/</link>
      <pubDate>Fri, 21 Nov 2014 14:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/two-sum/</guid>
      <description>Given an array of integers, find two numbers such that they add up to a specific target number.
The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution.
Input: numbers={2, 7, 11, 15}, target=9 Output: index1=1, index2=2 https://oj.</description>
    </item>
    
    <item>
      <title>Merge Sorted Array</title>
      <link>http://example.org/posts/merge-sorted-array-/</link>
      <pubDate>Fri, 21 Nov 2014 13:00:00 +0800</pubDate>
      
      <guid>http://example.org/posts/merge-sorted-array-/</guid>
      <description>Given two sorted integer arrays A and B, merge B into A as one sorted array.
Note: You may assume that A has enough space (size that is greater or equal to m + n) to hold additional elements from B. The number of elements initialized in A and B are m and n respectively.
https://oj.leetcode.com/problems/merge-sorted-array/
 class Solution { public:  void merge(int A[], int m, int B[], int n) {  int i=0,j=0;  int *C=new int[m+n];  while(i&amp;lt;m&amp;amp;&amp;amp;j&amp;lt;n)  {  if(A[i]&amp;lt;B[j])  {  C[i+j]=A[i];  i++;  }  else  {  C[i+j]=B[j];  j++;  }  }  while(i&amp;lt;m)  {  C[i+j]=A[i];  i++;  }  while(j&amp;lt;n)  {  C[i+j]=B[j];  j++;  }  for(i=0;i&amp;lt;m+n;i++)  {  A[i]=C[i];  }  } }; </description>
    </item>
    
  </channel>
</rss>
