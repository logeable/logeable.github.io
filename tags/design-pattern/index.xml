<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design pattern on l0g - blog</title><link>http://localhost:1313/tags/design-pattern/</link><description>Recent content in design pattern on l0g - blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 21 Feb 2015 12:00:00 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>多线程下的单例模式</title><link>http://localhost:1313/post/2015-02-21-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 21 Feb 2015 12:00:00 +0800</pubDate><guid>http://localhost:1313/post/2015-02-21-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>多线程下的单例模式。 一个简单的单例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Singleton { public: static Singleton* getInstance() { if(instance==nullptr) { instance=new Singleton(); } return instance; } private: Singleton(){}; Singleton(const Singleton&amp;amp;); const Singleton&amp;amp; operator=(const Singleton&amp;amp;); static Singleton *instance; }; Singleton* Singleton::instance=nullptr; 但是</description></item></channel></rss>